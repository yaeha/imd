"""

KAKAO VISION API 일일 호출건수 : 1,000건 (2018.6.11기준: 추후 변경 예정)
(쿼터 참조 링크 : https://developers.kakao.com/policies/usage#%EC%BF%BC%ED%84%B0%EB%B0%8F%EC%A0%9C%ED%95%9C)

1. KAKAO_JSON.py : 기존 이미지에서 얼굴 인식하여 json 파일 생성
2. KAKAO_BOUNDING.py : json내 좌표 데이터 추출하여 기존 이미지에 BBOX 입힌 이미지 저장
3. KAKAO_CROP.py : 얼굴부만 cropping 하여 저장
                   단일 이미지에 복수 개 얼굴 검출 시 파일명은 "기존 파일명_#" 형식으로 저장

"""

import sys, os
import json
import requests
from PIL import Image

#API 키
API_URL = 'https://kapi.kakao.com/v1/vision/face/detect'
MYAPP_KEY = '31c062468211c8e010d8ba657d6548d9'

#original_image 파일 리스트 받기
file_list = os.listdir('C:/API/Image')
list = []

for elements in file_list:
    list.append(elements)


# face detect 하기
def detect_face(filename):
    headers = {'Authorization': 'KakaoAK {}'.format(MYAPP_KEY)}

    try:
        files = {'file': open(filename, 'rb')}
        resp = requests.post(API_URL, headers=headers, files=files)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(str(e))
        sys.exit(0)


if __name__ == "__main__":

    #확장자 있는 파일
    for elements in list:
        Image.open('C:/API/Image/'+elements, mode='r')
        detf = detect_face('C:/API/Image/'+elements)

        name = elements.split('.')[0]
        # json 파일 생성하기
        with open('C:/API/KAKAO/json/'+name+'.json', 'w') as outfile:
            json.dump(detf, outfile, indent=2)
